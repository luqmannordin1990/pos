<?php

namespace App\Filament\Resources;

use Filament\Forms;
use App\Models\Item;
use Filament\Tables;
use App\Models\Estimate;
use Filament\Forms\Form;
use Filament\Tables\Table;

use Filament\Facades\Filament;
use Filament\Resources\Resource;
use Awcodes\TableRepeater\Header;
use Illuminate\Support\HtmlString;
use Filament\Support\Enums\Alignment;
use Illuminate\Support\Facades\Blade;
use Filament\Support\Enums\ActionSize;
use Filament\Forms\Components\Repeater;
use Filament\Notifications\Notification;
use Illuminate\Database\Eloquent\Builder;
use Filament\Forms\Components\Actions\Action;
use App\Filament\Resources\EstimateResource\Pages;
use Awcodes\TableRepeater\Components\TableRepeater;
use Illuminate\Database\Eloquent\SoftDeletingScope;
use App\Filament\Resources\EstimateResource\RelationManagers;

class EstimateResource extends Resource
{
    protected static ?string $model = Estimate::class;

    protected static ?string $navigationIcon = 'heroicon-o-rectangle-stack';
    protected static ?int $navigationSort = 5;

    public static function form(Form $form): Form
    {

        return $form
            ->schema([
                \Filament\Forms\Components\Section::make('')
                    ->id('estimate')
                    ->schema([
                        \Filament\Forms\Components\Group::make()
                            ->extraAttributes(function ($component) {
                                $statePath = $component->getStatePath();

                                return [
                                    'x-data' => '{
                                        total: 0,
                                        updateTotal() {
                                            this.total = Array.from(document.querySelectorAll(`[data-amount]`))
                                                        .reduce((sum, el) => {
                                                            const row = Alpine.$data(el);
                                                            return sum + (parseFloat(row.amount) || 0);
                                                        }, 0);
                                        
                                            // console.log("update");
                                        },
                                        changeItem(passedValue) {
                                           console.log(passedValue);
                                            
                                        }
                                    }',
                                    'x-init' => '$nextTick(() => { 
                                        updateTotal(); 
    
                                        // Watch for repeater DOM changes
                                        const repeater = document.querySelector("[data-repeater]");
                                        const observer = new MutationObserver(() => {
                                            // console.log("row changes");
                                            updateTotal();
                                        });
                                        if (repeater) {
                                            observer.observe(repeater, { childList: true, subtree: true });
                                        }
        
        
                                        })',
                                    '@row-updated.window' => 'updateTotal()',
                                    'data-repeater' => true,

                                ];
                            })
                            ->schema([
                                Forms\Components\Select::make('customer_id')
                                    ->relationship(
                                        name: 'customer',
                                        titleAttribute: 'name',
                                        modifyQueryUsing: fn(Builder $query) => $query->whereBelongsTo(Filament::getTenant())
                                    )
                                    ->required()
                                    ->searchable()
                                    ->preload(),
                                Forms\Components\DatePicker::make('date')
                                    ->default(date('Y-m-d'))
                                    ->required(),
                                Forms\Components\DatePicker::make('expiry_date')
                                    ->default(date('Y-m-d'))
                                    ->required(),
                                Forms\Components\TextInput::make('estimate_number')
                                    ->readonly()
                                    ->visible(fn($operation) => $operation == 'edit'),
                                Forms\Components\Textarea::make('notes')
                                    ->columnSpanFull(),

                                TableRepeater::make('item_estimate')
                                    // ->live()
                                    ->headers([
                                        Header::make('name')->width('150px'),
                                        Header::make('quantity')->width('150px'),
                                        Header::make('price')->width('150px'),
                                        Header::make('amount')->width('150px'),
                                    ])
                                    ->schema([
                                        \Filament\Forms\Components\Select::make('id')
                                            ->options(Item::where('team_id', Filament::getTenant()->id)
                                                ->pluck('name', 'id'))
                                            ->searchable()
                                            ->required()
                                            ->extraAttributes(function ($component, $get, $record) {
                                                $statePath = $component->getId();
                                              
                                                return [
                                                    'x-data' => "{
                                                        idxx: null,
                                                        updateAmount() {
                                                            this.amount = (parseFloat(this.price) || 0) * (parseFloat(this.quantity) || 0);
                                                            \$dispatch('row-updated');
                                                        },
                                                       
                                                    }",
                                                    'x-model' => 'idxx', 
                                                    '@change' => 'changeItem(idxx)',
                                                    'data-idxx' => json_encode($statePath) ,
                                                ];
                                            }),
                                        \Filament\Forms\Components\TextInput::make('pivot.quantity')
                                            ->integer()  // The input should be an integer.
                                            ->required()
                                            ->afterStateUpdated(function ($set, $get, $state) {
                                                self::calculate_total($set, $get);
                                            })
                                            ->extraAttributes(function ($component, $get, $record) {
                                                $statePath = $component->getStatePath() . "id";
                                                return [
                                                    '@change' => 'recalculateTotal()',
                                                ];
                                            }),
                                        \Filament\Forms\Components\TextInput::make('price')
                                            ->readonly()
                                            ->dehydrated(false)
                                            ->required(),
                                        \Filament\Forms\Components\TextInput::make('amount')
                                            ->readonly()
                                            ->dehydrated(false)
                                            ->required(),

                                    ])
                                    ->addActionAlignment(Alignment::Start)
                                    ->columnSpan('full'),
                                \Filament\Forms\Components\Placeholder::make('footer')
                                    ->hiddenLabel()
                                    ->content(function ($record, $get) {
                                        $html = '';
                                        $sub_total = 0;
                                        foreach ($get('item_estimate') as $key => $value) {
                                            $sub_total += $value['pivot']['quantity'] * $value['price'];
                                        }
                                        $html .= Blade::render('
                                        <div class="flex flex-col justify-center items-end bg-gray-100 rounded">
                                                <div class="w-1/3  flex justify-between p-2">
                                                        <span class="font-bold">Sub Total</span>
                                                          <input class="font-bold" type="text" x-model="total">
                                                </div>
                                                <div class="w-1/3  flex justify-between p-2">
                                                        <span class="font-bold text-lg">Total</span>
                                                        <span class="font-bold text-lg" x-text="total">' . $sub_total . '</span>
                                                </div>
         
                                        </div>
        
                                        ');
                                        return new HtmlString($html);
                                    })
                                    ->columnSpan('full'),

                            ])

                            ->columns(2)

                    ])

            ]);
    }

    static function  calculate_total($set, $get)
    {
        $price = Item::find($get('id'))?->price ?? 0;
        $amount = $price * $get('pivot.quantity');
        $set('price', $price);
        $set('amount', $amount);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                Tables\Columns\TextColumn::make('customer.name')
                    ->numeric()
                    ->sortable(),
                Tables\Columns\TextColumn::make('date')
                    ->date()
                    ->sortable(),
                Tables\Columns\TextColumn::make('expiry_date')
                    ->date()
                    ->sortable(),
                Tables\Columns\TextColumn::make('estimate_number')
                    ->searchable(),
                Tables\Columns\TextColumn::make('deleted_at')
                    ->dateTime()
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),
                Tables\Columns\TextColumn::make('created_at')
                    ->dateTime()
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),
                Tables\Columns\TextColumn::make('updated_at')
                    ->dateTime()
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),
            ])
            ->filters([
                Tables\Filters\TrashedFilter::make(),
            ])
            ->actions([
                Tables\Actions\EditAction::make(),
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\DeleteBulkAction::make(),
                    Tables\Actions\ForceDeleteBulkAction::make(),
                    Tables\Actions\RestoreBulkAction::make(),
                ]),
            ])
            ->recordUrl(null)
            ->recordAction(null)
            ->defaultSort('updated_at', 'desc');
    }

    public static function getRelations(): array
    {
        return [
            //
            // RelationManagers\ItemsRelationManager::class,
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListEstimates::route('/'),
            'create' => Pages\CreateEstimate::route('/create'),
            'edit' => Pages\EditEstimate::route('/{record}/edit'),
        ];
    }

    public static function getEloquentQuery(): Builder
    {
        return parent::getEloquentQuery()
            ->withoutGlobalScopes([
                SoftDeletingScope::class,
            ]);
    }
}
