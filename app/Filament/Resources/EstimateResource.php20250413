<?php

namespace App\Filament\Resources;

use Filament\Forms;
use App\Models\Item;
use Filament\Tables;
use App\Models\Estimate;
use Filament\Forms\Form;
use Filament\Tables\Table;

use Filament\Facades\Filament;
use Filament\Resources\Resource;
use Awcodes\TableRepeater\Header;
use Illuminate\Support\HtmlString;
use Filament\Support\Enums\Alignment;
use Illuminate\Support\Facades\Blade;
use Filament\Support\Enums\ActionSize;
use Filament\Forms\Components\Repeater;
use Filament\Notifications\Notification;
use Illuminate\Database\Eloquent\Builder;
use Filament\Forms\Components\Actions\Action;
use App\Filament\Resources\EstimateResource\Pages;
use Awcodes\TableRepeater\Components\TableRepeater;
use Illuminate\Database\Eloquent\SoftDeletingScope;
use App\Filament\Resources\EstimateResource\RelationManagers;
use Filament\Forms\Components\Grid;
use Filament\Forms\Components\Group;

class EstimateResource extends Resource
{
    protected static ?string $model = Estimate::class;

    protected static ?string $navigationIcon = 'heroicon-o-rectangle-stack';
    protected static ?int $navigationSort = 5;

    public static function form(Form $form): Form
    {

        return $form
            ->schema([
                \Filament\Forms\Components\Section::make('')
                    ->id('estimate')
                    ->schema([
                        \Filament\Forms\Components\Group::make()
                            ->extraAttributes([
                                'x-data' => '{
                                total: 0,
                                recalculateTotal() {
                                    this.total = Array.from(document.querySelectorAll(`[x-row]`))
                                        .reduce((sum, el) => {
                                            const row = Alpine.$data(el);
                                            return sum + (parseFloat(row.amount) || 0);
                                        }, 0);
                                }
                            }',
                                '@row-updated.window' => 'recalculateTotal()',
                            ])
                            ->schema([
                                \Filament\Forms\Components\Repeater::make('items')
                                    ->schema([
                                        \Filament\Forms\Components\Group::make()
                                        ->extraAttributes(function ($component) {
                                            $statePath_amount = $component->getStatePath() . '.amount';
                    
                                            return [
                                                'x-data' => '{
                                                    price: 0,
                                                    quantity: 0,
                                                    amount: 0,
                                                    updateAmount() {
                                                        this.amount = (parseFloat(this.price) || 0) * (parseFloat(this.quantity) || 0);
                                                        $dispatch("row-updated");
                                                    }
                                                }',
                                                'x-row' => true,
                                            ];
                                        })
                                            ->schema([
                                                \Filament\Forms\Components\TextInput::make('price')
                                                    ->numeric()
                                                    ->extraAttributes([
                                                        'x-model' => 'price',
                                                        '@input' => 'updateAmount()',
                                                    ]),
                                                \Filament\Forms\Components\TextInput::make('quantity')
                                                    ->numeric()
                                                    ->extraAttributes([
                                                        'x-model' => 'quantity',
                                                        '@input' => 'updateAmount()',
                                                    ]),
                                                \Filament\Forms\Components\TextInput::make('amount')
                                                    ->label('Amount (Auto)')
                                                    ->extraAttributes(function ($component) {
                                                        $statePath = $component->getStatePath();
                                                        return [
                                                            'x-model' => 'amount',
                                                            'x-effect' => "\$wire.set('$statePath', amount)",
                                                        ];
                                                    })
                                                    ->readonly(),
                                            ]),
                                    ]),
                                \Filament\Forms\Components\TextInput::make('total')
                                    ->label('Total (Auto)')
                                    ->extraAttributes(function ($component) {
                                        $statePath = $component->getStatePath();
                                        return [
                                            'x-model' => 'total',
                                            'x-effect' => "\$wire.set('$statePath', total)",
                                        ];
                                    })
                                    ->readonly(),
                            ]),


                    ]),
            ]);
    }

    static function  calculate_total($set, $get)
    {
        $price = Item::find($get('id'))?->price ?? 0;
        $amount = $price * $get('pivot.quantity');
        $set('price', $price);
        $set('amount', $amount);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                Tables\Columns\TextColumn::make('customer.name')
                    ->numeric()
                    ->sortable(),
                Tables\Columns\TextColumn::make('date')
                    ->date()
                    ->sortable(),
                Tables\Columns\TextColumn::make('expiry_date')
                    ->date()
                    ->sortable(),
                Tables\Columns\TextColumn::make('estimate_number')
                    ->searchable(),
                Tables\Columns\TextColumn::make('deleted_at')
                    ->dateTime()
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),
                Tables\Columns\TextColumn::make('created_at')
                    ->dateTime()
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),
                Tables\Columns\TextColumn::make('updated_at')
                    ->dateTime()
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),
            ])
            ->filters([
                Tables\Filters\TrashedFilter::make(),
            ])
            ->actions([
                Tables\Actions\EditAction::make(),
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\DeleteBulkAction::make(),
                    Tables\Actions\ForceDeleteBulkAction::make(),
                    Tables\Actions\RestoreBulkAction::make(),
                ]),
            ])
            ->recordUrl(null)
            ->recordAction(null)
            ->defaultSort('updated_at', 'desc');
    }

    public static function getRelations(): array
    {
        return [
            //
            // RelationManagers\ItemsRelationManager::class,
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListEstimates::route('/'),
            'create' => Pages\CreateEstimate::route('/create'),
            'edit' => Pages\EditEstimate::route('/{record}/edit'),
        ];
    }

    public static function getEloquentQuery(): Builder
    {
        return parent::getEloquentQuery()
            ->withoutGlobalScopes([
                SoftDeletingScope::class,
            ]);
    }
}
